<?xml version="1.0" ?>
<project name="General QA Application Build File" default="default">

    <!-- Load environment -->
    <property environment="env"/>

    <!-- Not sure why, but env.HOSTANME will not be assigned despite loading the environment (Ubuntu 10.10, Ant 1.8) -->
    <exec executable="hostname" outputproperty="env.HOSTNAME"/>

    <!-- Select the engine: eng/pro: eng by default;, override with -Dpro=(anything) -->
    <condition property="voltdb.dir" value="../../../obj/release/dist/voltdb" else="../../../../pro/obj/pro/dist/voltdb">
        <not>
            <isset property="pro"/>
        </not>
    </condition>

    <!-- Define all launch defaults as overridable properties -->
    <property name="port" value="21212"/>
    <property name="jmxport" value="9090"/>
    <property name="internalport" value="3021"/>
    <property name="adminport" value="6667"/>
    <property name="deployment" location="deployment.xml"/>
    <property name="log4j.configuration" location="log4j.properties"/>

    <!-- Horrible hack: I don't want my voltroot to be /tmp because I want those files segregated, but if the folder
         doesn't exist, the server start will fail!  So we ensure the directory is created on-demand when the server
         is started.
    -->
    <property name="deployment.voltroot" location="/tmp/genqa"/>
    <property name="jsonport" value="8080"/>
    <property name="daemon.log" location="daemon.log"/>

    <!-- Build-specific properties -->
    <property name="build.dir" location="obj/"/>
    <property name="src.dir" location="src/"/>
    <property name="debugoutput.dir" location="debugoutput/"/>
    <property name="junit.haltonfailure" value="true"/>
    <property name="catalog" value="genqa.jar"/>
    <path id="project.classpath">
        <fileset dir="${voltdb.dir}">
            <include name="voltdb*.jar"/>
        </fileset>
        <pathelement location="${build.dir}"/>
        <pathelement path="${java.class.path}"/>
    </path>

    <macrodef name="invoke-java-client">
        <attribute name="classname"/>
        <element name="javac" optional="true" implicit="true"/>
        <sequential>
            <java classname="@{classname}" fork="yes" failonerror="true">
                <jvmarg value="-server"/>
                <jvmarg value="-Xmx512m"/>
                <jvmarg value="-XX:+HeapDumpOnOutOfMemoryError"/>
                <jvmarg value="-XX:HeapDumpPath=/tmp"/>
                <jvmarg value="-XX:-ReduceInitialCardMarks"/>
                <classpath refid="project.classpath"/>
                <assertions>
                    <disable/>
                </assertions>
                <javac/>
            </java>
        </sequential>
    </macrodef>

    <macrodef name="invoke-java-server">
        <element name="javac" optional="true" implicit="true"/>
        <sequential>
            <java classname="org.voltdb.VoltDB" fork="yes" failonerror="true">
                <jvmarg value="-Djava.library.path=${voltdb.dir}"/>
                <jvmarg value="-server"/>
                <jvmarg value="-Xmx512m"/>
                <jvmarg value="-XX:+HeapDumpOnOutOfMemoryError"/>
                <jvmarg value="-XX:HeapDumpPath=/tmp"/>
                <jvmarg value="-XX:-ReduceInitialCardMarks"/>
                <jvmarg value="-Dlog4j.configuration=file://${log4j.configuration}"/>
                <jvmarg value="-Dvolt.rmi.agent.port=${jmxport}"/>
                <jvmarg value="-Dvolt.rmi.server.hostname=${env.HOSTNAME}"/>
                <classpath refid="project.classpath"/>
                <assertions>
                    <disable/>
                </assertions>
                <javac/>
                <arg value="catalog"/>
                <arg value="${catalog}"/>
                <arg value="deployment"/>
                <arg value="${deployment}"/>
                <arg value="port" />
                <arg value="${port}" />
                <arg value="internalport" />
                <arg value="${internalport}" />
                <arg value="leader"/>
                <arg value="localhost"/>
            </java>
        </sequential>
    </macrodef>

    <target name="default" depends="srccompile, proccompile, catalog, server" description="Compile and start server."/>
    <target name="build" depends="srccompile, proccompile, catalog" description="Compile everything."/>

    <target name="clean" depends="config" description="Remove compilation artifacts">
        <delete failonerror="false" includeemptydirs="true">
            <fileset dir="${deployment.voltroot}"/>
            <fileset dir="${build.dir}"/>
            <fileset dir="${debugoutput.dir}"/>
            <fileset dir="." defaultexcludes="yes">
                <include name="${catalog}"/>
                <include name="*.log"/>
            </fileset>
        </delete>
    </target>

    <target name="srccompile">
        <mkdir dir="${build.dir}"/>
        <javac srcdir="${src.dir}" destdir="${build.dir}" debug="true" target="1.6" includeantruntime="false">
            <classpath refid="project.classpath"/>
        </javac>
    </target>

    <target name="proccompile" if="procedures.dir">
        <javac srcdir="${procedures.dir}" destdir="${build.dir}" debug="true" target="1.6" includeantruntime="false">
            <classpath refid="project.classpath"/>
        </javac>
    </target>

    <target name="catalog" depends="srccompile, proccompile" description="Compile the catalog using the schema and the DDL file">
        <java classname="org.voltdb.compiler.VoltCompiler" fork="yes" failonerror="true">
            <jvmarg value="-Dlog4j.configuration=file://${log4j.configuration}"/>
            <arg value="project.xml"/>
            <arg value="${catalog}"/>
            <classpath refid="project.classpath"/>
            <assertions>
                <disable/>
            </assertions>
        </java>
    </target>

    <target name="server" description="Start the server and load the catalog.">
        <mkdir dir="${deployment.voltroot}" />
        <invoke-java-server />
    </target>

    <target name="rejoin" description="Start the server and load the catalog.">
        <mkdir dir="${deployment.voltroot}" />
        <invoke-java-server>
            <arg value="rejoinhost"/>
            <arg value="${host}"/>
        </invoke-java-server>
    </target>

    <target name="jiggle" description="Start the voter multi-threaded SyncClient application.">
        <invoke-java-client classname="com.JiggleClient">
            <arg value="--pool=50000000"/>
            <arg value="--procedure=${proc}"/>
            <arg value="--threads=1"/>
            <arg value="--rate=200000"/>
            <arg value="--async"/>
            <arg value="--share-connection"/>
            <arg value="--duration=3000"/>
            <arg value="--servers=localhost"/>
            <arg value="--port=21212"/>
        </invoke-java-client>
    </target>

    <target name="latcheck" description="Start the voter multi-threaded SyncClient application.">
        <invoke-java-client classname="com.FixedLatencyClient">
            <arg value="--wait=30"/>
            <arg value="--procedure=WaitSinglePartition"/>
            <arg value="--threads=1"/>
            <arg value="--rate=200000"/>
            <arg value="--async"/>
            <arg value="--share-connection"/>
            <arg value="--duration=120"/>
            <arg value="--servers=volt5a"/>
            <arg value="--port=21212"/>
        </invoke-java-client>
    </target>

    <target name="wait-s" description="Start the WaitClient application (Single-Partition Wait).">
        <invoke-java-client classname="com.WaitClient" />
    </target>

    <target name="wait-m" description="Start the WaitClient application (Multi-Partition Wait).">
        <invoke-java-client classname="com.WaitClient">
            <arg value="--multi"/>
        </invoke-java-client>
    </target>

    <target name="waitex" description="Start the WaitEx client.">
        <invoke-java-client classname="com.WaitExClient">
            <arg value="--wait=0"/>
            <arg value="--threads=8"/>
            <arg value="--rate=200000"/>
            <arg value="--share-connection"/>
            <arg value="--duration=120"/>
            <arg value="--servers=localhost"/>
            <arg value="--port=21212"/>
        </invoke-java-client>
    </target>

    <target name="lat" description="Start the latency checker.">
        <invoke-java-client classname="com.FixedLatencyClient">
            <arg value="--wait=1"/>
            <arg value="--procedure=WaitSinglePartition"/>
            <arg value="--threads=50"/>
            <arg value="--rate=200000"/>
            <arg value="--share-connection"/>
            <arg value="--duration=10"/>
            <arg value="--servers=localhost"/>
            <arg value="--port=21212"/>
        </invoke-java-client>
    </target>

    <target name="export" description="Start the export client.">
        <invoke-java-client classname="org.voltdb.exportclient.ExportToFileClient">
            <arg value="--connect"/>
            <arg value="client"/>
            <arg value="--servers"/>
            <arg value="localhost"/>
            <arg value="--type"/>
            <arg value="csv"/>
            <arg value="--outdir"/>
            <arg value="/tmp"/>
            <arg value="--nonce"/>
            <arg value="export"/>
            <arg value="--period"/>
            <arg value="2"/>
        </invoke-java-client>
    </target>

    <!-- Displays the call configuration -->
    <target name="config">
        <antcall target="timestamp" />
        <echo>Engine: ${voltdb.dir}
Build: ${build.dir}
Deployment: ${deployment}
Host: ${hostname}
        </echo>
    </target>

    <!-- Echos the current date/time -->
    <target name="timestamp">
        <tstamp>
            <format property="logtime" pattern="yyyy.MM.dd':' HH:mm:ss z" />
        </tstamp>
        <echo message="${logtime}" />
    </target>

    <!-- Create a deployment file along with .sh file for ant-less launching -->
    <target name="deploy">
        <echo file="${deployment}" append="false"><![CDATA[<?xml version="1.0"?>
<deployment>
    <cluster hostcount="1" sitesperhost="2" leader="localhost" kfactor="0" />
    <heartbeat timeout="10"/>
    <admin-mode port="${adminport}" adminstartup="false" />
    <snapshot prefix="genqa" retain="3" frequency="600s"/>
    <paths>
        <voltdbroot path="${deployment.voltroot}" />
    </paths>
    <httpd port="${jsonport}">
        <jsonapi enabled="true"/>
    </httpd>
</deployment>
]]></echo>
        <echo file="daemon.sh" append="false"><![CDATA[#!/bin/bash
usage="Usage: daemon.sh (start|stop) [rejoin-hostname]"
if [ $# = 0 ]; then
 echo $usage
 exit 1
fi

if [ "$VOLTDB_PID_DIR" = "" ]; then
  VOLTDB_PID_DIR=/tmp
fi

if [ "$VOLTDB_IDENT_STRING" = "" ]; then
  export VOLTDB_IDENT_STRING="$USER"
fi

# Set default scheduling priority
if [ "$VOLTDB_NICENESS" = "" ]; then
    export VOLTDB_NICENESS=5
fi

startStop=$1
pid=$VOLTDB_PID_DIR/voltdb-$VOLTDB_IDENT_STRING.pid

log=${daemon.log}
command="java -server -Xmn1536m -Xmx2048m -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tmp -XX:-ReduceInitialCardMarks -Dvolt.rmi.agent.port=${jmxport} -Dvolt.rmi.server.hostname=$HOSTNAME -Djava.library.path=${voltdb.dir} -Dlog4j.configuration=${log4j.configuration} -cp .:${voltdb.dir}/* org.voltdb.VoltDB port ${port} internalport ${internalport} catalog ${catalog} deployment ${deployment}"
case $startStop in

  (start)

    mkdir -p "${deployment.voltroot}"

    if [ -f $pid ]; then
      if kill -0 `cat $pid` > /dev/null 2>&1; then
        echo Already running as process `cat $pid`.  Stop it first.
        exit 1
      fi
    fi

    if [ "$2" == "" ]; then
        nohup nice -n $VOLTDB_NICENESS $command &> "$log" < /dev/null &
    else
        nohup nice -n $VOLTDB_NICENESS $command rejoinhost $2 &> "$log" < /dev/null &
    fi
    echo $! > $pid
    sleep 1; head -n 100 "$log"
    ;;

  (stop)

    if [ -f $pid ]; then
      if kill -0 `cat $pid` > /dev/null 2>&1; then
        echo stopping
        kill `cat $pid`
      else
        echo no process to stop
      fi
    else
      echo no process to stop
    fi
    ;;

  (*)
    echo $usage
    exit 1
    ;;

esac
]]></echo>
        <chmod file="daemon.sh" perm="+x" />
    </target>
</project>
